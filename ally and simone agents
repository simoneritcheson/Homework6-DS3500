import random
import numpy as np

def swapper(data):
    """
    swaps two random rows
    :param solutions:  numpy array, one solution
    :return: new solution generated from original
    """
    #accesses single solution

    new = data[0]

    # choses two random rows within solutions
    i = rnd.randrange(0, len(new))
    j = rnd.randrange(0, len(new))

    #swaps random rows
    new[i], new[j] = new[j], new[i]

    return new

def reallocate(data):
    """
    finding which ta's are overallocared and swapping the index of an assigned
    :param solutions: numpy array, one solution
    :return: update solutions
    """

    #accesses single solution
    new = data[0]

    #list of position in sol of each ta who is overallocated
    over = [i for ta, max, i in zip(new, allo_prefs, range(len(new))) if sum(ta) > max]

    # if no tas overallocated
    if not over:
        return new
    #chose random overallocated ta
    ta = rnd.choice(over)

    while True:
        i = rnd.randrange(0, len(new[ta]))

        if section assigned, unassign
        if new[ta][i] == 1:
            new[ta][i] = 0
            return new

def trade_rows(data):
    """
    swaps one row of solution with another solutions row
    param solutions: numpy array, one solution
    :return: new solution generated from original
    """
    #accesses first solution
    sol1 = data[0]

    #access second solution
    sol2 = data[1]

    #choses random row i
    i = rnd.randrange(0, len(sol1))

    #swaps row i of sol 1 with row i of sol 2
    sol1[i] = sol2[i]
    return sol1
